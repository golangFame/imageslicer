# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches:
      - 'main'

  pull_request:
    branches:
      - 'main'

  schedule:
    - cron: '0 0 */2 * *'

  workflow_dispatch:

concurrency:
  group: go
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GOCACHE: /tmp/go/gocache

    steps:
    - uses: actions/checkout@v3

    - name: Cache Go tests
      uses: actions/cache@v2
      with:
        path: |
          $(go env GOCACHE)
        key: ${{ runner.os }}-go-${{ hashFiles('imageslicer_test.go') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('imageslicer_test.go') }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19.4
        check-latest: true
        cache-dependency-path: go.sum
        cache: true
        go-version-file: go.mod

    - name: Install dependencies
      run: go get .

    - name: Build
      run: go build -v ./...

    - name: Examples
      run: |
        PACKAGE_DIRS=$(find . -mindepth 2 -type f -name 'go.mod' -exec dirname {} \; \
        | sort)
        echo $PACKAGE_DIRS
        for dir in $PACKAGE_DIRS
                do
                   printf "building ${dir}\n"
                   go build $dir
        #          cd $dir
        #          printf "${dir}"
        #          go get -u
        #
        #          (cd ./${dir} && go get -u && go mod tidy) # -compat=1.19
                done

  test:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v3

      - name: Test Short
        run: go test -v -run="^Test" -short ./... -timeout 20m

#  test-intensive:
#    runs-on: ubuntu-latest
#    needs: [ build ]
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Test
#        run: go test -v -run="^Test" ./... -timeout 6h

  race:
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - uses: actions/checkout@v3

      - name: Race Short
        run: go test ./... -v -race -run "^Test" -short -timeout 20m

#  race-intensive:
#    runs-on: ubuntu-latest
#    needs: [ test ]
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Race
#        run: go test -v -race -run="^Test" ./... -timeout 15m


  benchmark:
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - uses: actions/checkout@v3

      - name: Benchmark
        run: go test -v -benchmem -bench=. -run="^#" -benchtime=100x -race -count 1000 -timeout 15m




